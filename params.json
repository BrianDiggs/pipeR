{"name":"pipeR","tagline":"High-performance pipeline operator and Pipe function","body":"\r\n\r\n# pipeR\r\n\r\n[![Build Status](https://travis-ci.org/renkun-ken/pipeR.png?branch=master)](https://travis-ci.org/renkun-ken/pipeR)\r\n\r\nHigh-performance pipeline operator and light-weight Pipe function based on a set of simple and intuitive rules, making command chaining definite, readable and fast.\r\n\r\n## What's new in 0.4?\r\n\r\n- **Major API Change**: `%>>%` operator now handles all pipeline mechanisms and other operators are deprecated.\r\n- Add `Pipe()` function that supports object-based pipeline operation.\r\n\r\n[Release notes](https://github.com/renkun-ken/pipeR/releases)\r\n\r\n## Installation\r\n\r\nInstall from CRAN:\r\n\r\n```r\r\ninstall.packages(\"pipeR\")\r\n```\r\n\r\nInstall the development version from GitHub (`devtools` package is required):\r\n\r\n```r\r\ndevtools::install_github(\"pipeR\",\"renkun-ken\")\r\n```\r\n\r\n## Usage\r\n\r\n### `%>>%`\r\n\r\n`%>>%` operator behaves based on a set of rules:\r\n\r\n* Pipe to first argument and `.` in a function\r\n\r\n```r\r\nrnorm(100) %>>%\r\n  plot\r\n\r\nrnorm(100) %>>%\r\n  plot(col=\"red\")\r\n  \r\nrnorm(100) %>>%\r\n  plot(col=\"red\", main=length(.))\r\n```\r\n\r\n* Pipe to `.` in an expression\r\n\r\n```r\r\nmtcars %>>%\r\n  { lm(mpg ~ cyl + wt, data = .) }\r\n\r\nmtcars %>>%\r\n  ( lm(mpg ~ cyl + wt, data = .) )\r\n```\r\n\r\n* Pipe by lambda expression\r\n\r\n```r\r\nmtcars %>>%\r\n  (df -> lm(mpg ~ cyl + wt, data = df))\r\n  \r\nrnorm(100) %>>%\r\n  (x -> plot(x, col=\"red\", main=length(x)))\r\n```\r\n\r\n* Extract element\r\n\r\n```r\r\nmtcars %>>%\r\n  (mpg)\r\n```\r\n\r\nWorking with [dplyr](https://github.com/hadley/dplyr/):\r\n\r\n```r\r\nlibrary(dplyr)\r\nmtcars %>>%\r\n  filter(mpg <= mean(mpg)) %>>%\r\n  select(mpg, wt, qsec) %>>%\r\n  (lm(mpg ~ ., data = .)) %>>%\r\n  summary() %>>%\r\n  (coefficients)\r\n```\r\n\r\nWorking with [ggvis](http://ggvis.rstudio.com/):\r\n\r\n```r\r\nlibrary(ggvis)\r\nmtcars %>>%\r\n  ggvis(~mpg, ~wt) %>>%\r\n  layer_points()\r\n```\r\n\r\nWorking with [rlist](http://renkun.me/rlist/):\r\n\r\n```r\r\nlibrary(rlist)\r\n1:100 %>>%\r\n  list.group(. %% 3) %>>%\r\n  list.mapv(g -> mean(g))\r\n```\r\n\r\n### `Pipe()`\r\n\r\n`Pipe()` creates a Pipe object that supports light-weight chaining without any external operator. Typically, start with `Pipe()` and end with `$value` or `[]` to extract the final value of the Pipe. An internal function `.()` works in the same way with `x %>>% (...)` for dot piping, lambda expression, and element extraction.\r\n\r\nExpressions using `%>>%` can be easily translated to `Pipe()`. But `Pipe()` is shipped with more features. See details in vignettes.\r\n\r\nWorking with dplyr:\r\n\r\n```r\r\nPipe(mtcars)$\r\n  filter(mpg >= mean(mpg))$\r\n  select(mpg, wt, qsec)$\r\n  .(lm(mpg ~ ., data = .))$\r\n  summary()$\r\n  .(coefficients)$\r\n  value\r\n```\r\n\r\nWorking with ggvis:\r\n\r\n```r\r\nPipe(mtcars)$\r\n  ggvis(~ mpg, ~ wt)$\r\n  layer_points()\r\n```\r\n\r\nWorking with rlist:\r\n\r\n```r\r\nPipe(1:100)$\r\n  list.group(. %% 3)$\r\n  list.mapv(g -> mean(g))$\r\n  value\r\n```\r\n\r\n## Performance\r\n\r\n[Benchmark tests](http://cran.r-project.org/web/packages/pipeR/vignettes/Performance.html) show that pipeR operator and Pipe object can achieve high performance especially when they are intensively called.\r\n\r\n- If you do not care about the performance of intensive calling and need heuristic distinction between different piping mechanisms, you may use `%>%` in [magrittr](https://github.com/smbache/magrittr) which also provides additional aliases of basic functions. \r\n- If you care about performance issues and are sure which type of piping you are using, pipeR can be a helpful choice.\r\n\r\n## Vignettes\r\n\r\nThe package also provides the following vignettes:\r\n\r\n- [Introduction](http://cran.r-project.org/web/packages/pipeR/vignettes/Introduction.html)\r\n- [Examples](http://cran.r-project.org/web/packages/pipeR/vignettes/Examples.html)\r\n- [Performance](http://cran.r-project.org/web/packages/pipeR/vignettes/Performance.html)\r\n\r\n\r\n## Help overview\r\n\r\n```r\r\nhelp(package = pipeR)\r\n```\r\n\r\n## License\r\n\r\nThis package is under [MIT License](http://opensource.org/licenses/MIT).\r\n","google":"UA-47159422-1","note":"Don't delete this file! It's used internally to help with page regeneration."}