{"name":"pipeR","tagline":"Specialized, high-performance pipeline operators for R","body":"# pipeR\r\n\r\n[![Build Status](https://travis-ci.org/renkun-ken/pipeR.png?branch=master)](https://travis-ci.org/renkun-ken/pipeR)\r\n\r\nSpecialized, high-performance pipeline operators for R: making command chaining clear, fast, readable and flexible.\r\n\r\n[Release notes](https://github.com/renkun-ken/pipeR/releases)\r\n\r\n## Installation\r\n\r\nInstall from CRAN:\r\n\r\n```r\r\ninstall.packages(\"pipeR\")\r\n```\r\n\r\nInstall the development version from GitHub (`devtools` package is required):\r\n\r\n```r\r\ndevtools::install_github(\"pipeR\",\"renkun-ken\")\r\n```\r\n\r\n## Examples\r\n\r\n### First-argument piping\r\n\r\n`%>>%` operator inserts the expression on the left-hand side to the first argument of the **function** on the right-hand side.\r\n\r\n```r\r\nrnorm(100) %>>% plot\r\n# plot(rnorm(100))\r\n\r\nrnorm(100) %>>% plot()\r\n# plot(rnorm(100))\r\n\r\nrnorm(100) %>>% plot(col=\"red\")\r\n# plot(rnorm(100),col=\"red\")\r\n\r\nrnorm(100) %>>% sample(size=100,replace=FALSE) %>>% hist\r\n# hist(sample(rnorm(100),size=100,replace=FALSE))\r\n```\r\n\r\nWith the first-argument pipe operator `%>>%`, you can write code like\r\n\r\n```r\r\nrnorm(10000,mean=10,sd=1) %>>%\r\n  sample(size=100,replace=FALSE) %>>%\r\n  log %>>%\r\n  diff %>>%\r\n  plot(col=\"red\",type=\"l\")\r\n```\r\n\r\n### Free piping\r\n\r\n`%:>%` takes `.` to represent the piped object on the left-hand side and evaluate the *expression* on the right-hand side.\r\n\r\n```r\r\nrnorm(100) %:>% plot(.)\r\n# plot(rnorm(100))\r\n\r\nrnorm(100) %:>% plot(., col=\"red\")\r\n# plot(rnorm(100),col=\"red\")\r\n\r\nrnorm(100) %:>% sample(., size=length(.)*0.5)\r\n# (`.` is piped to multiple places)\r\n\r\nmtcars %:>% lm(mpg ~ cyl + disp, data=.) %>>% summary\r\n# summary(lm(mgp ~ cyl + disp, data=mtcars))\r\n\r\nrnorm(100) %:>% \r\n  sample(.,length(.)*0.2,FALSE) %:>% \r\n  plot(.,main=sprintf(\"length: %d\",length(.)))\r\n# (`.` is piped to multiple places and mutiple levels)\r\n\r\nrnorm(100) %:>% {\r\n  par(mfrow=c(1,2))\r\n  hist(.,main=\"hist\")\r\n  plot(.,col=\"red\",main=sprintf(\"%d\",length(.)))\r\n}\r\n# (`.` is piped to an enclosed expression)\r\n```\r\n\r\n### Lambda piping\r\n\r\n`%|>%` operator evaluates a lambda expression like `x ~ f(x)` in which `x` represents the left-hand side and `f(x)` represents the right-hand side expression about `x`.\r\n\r\n```r\r\nmtcars %|>%\r\n  (df ~ lm(mpg ~ ., data=df))\r\n```\r\n\r\n### Mixed piping\r\n\r\nAll the pipe operators can be used together and each of them only works in their own way.\r\n\r\n```r\r\nmtcars %|>%\r\n  (df ~ lm(mpg ~ ., data=df)) %>>%\r\n  summary %:>%\r\n  .$fstatistic\r\n```\r\n\r\n## Performance\r\n\r\nSince these operators are specialized in their tasks, their performance is very close to traditional approach. \r\n\r\n- If you want to stick to a single operator and do not consider the performance of intensive calling, you may use `%>%` in [magrittr](https://github.com/smbache/magrittr) which also provides additional aliases of basic functions. \r\n- If you care about performance issues and are sure which type of piping you are using, it's better to use pipeR operators. \r\n\r\n## Vignettes\r\n\r\nThe package also provides the following vignettes:\r\n\r\n- [Introduction](http://cran.r-project.org/web/packages/pipeR/vignettes/Introduction.html)\r\n- [Examples](http://cran.r-project.org/web/packages/pipeR/vignettes/Examples.html)\r\n- [Performance](http://cran.r-project.org/web/packages/pipeR/vignettes/Performance.html)\r\n\r\n\r\n## Help overview\r\n\r\n```r\r\nhelp(package = pipeR)\r\n```\r\n\r\n## License\r\n\r\nThis package is under [MIT License](http://opensource.org/licenses/MIT).\r\n","google":"UA-47159422-1","note":"Don't delete this file! It's used internally to help with page regeneration."}